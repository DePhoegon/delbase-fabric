FlammableBlockRegistry.getDefaultInstance().add(EXAMPLE_BLOCK, 5, 5);

FuelRegistry.INSTANCE.add(CUSTOM_ITEM, 300);
-----------
UseToolCallback.EVENT.register((player, world, hand, hitResult, toolType) -> {
            if (toolType == ToolType.AXE) {
                world.setBlockState(hitResult.getBlockPos(), Blocks.AIR.getDefaultState());
                return ActionResult.SUCCESS;
            }
            return ActionResult.PASS;
        });





ExampleMod.EVENT.register((player, blockPos) -> {
            if (blockPos.equals(pos)) {
                // Do something when the event is triggered at this block position
            }
        });
--------------------
import net.minecraft.block.entity.BlockEntity;
import net.minecraft.block.entity.BlockEntityType;
import net.minecraft.inventory.SidedInventory;
import net.minecraft.item.ItemStack;
import net.minecraft.util.math.Direction;

public class MyBlockEntity extends BlockEntity implements SidedInventory {
    private final ItemStack[] inventory = new ItemStack[3];

    public MyBlockEntity(BlockEntityType<?> type) {
        super(type);
    }

    @Override
    public int[] getAvailableSlots(Direction side) {
        // Return the index of the slot that is accessible from the given side
        if (side == Direction.DOWN) {
            return new int[]{0};
        } else if (side == Direction.UP) {
            return new int[]{1};
        } else {
            return new int[]{2};
        }
    }

    @Override
    public boolean canInsert(int slot, ItemStack stack, Direction dir) {
        // Only allow insertion into the specified slot from the given side
        int[] availableSlots = getAvailableSlots(dir);
        for (int availableSlot : availableSlots) {
            if (slot == availableSlot) {
                return true;
            }
        }
        return false;
    }

    @Override
    public boolean canExtract(int slot, ItemStack stack, Direction dir) {
        // Allow extraction from any slot
        return true;
    }

    // Implement other required methods such as getInvSize, getInvStack, etc.
}
-----------------
public class MyBlockEntity extends BlockEntity implements SidedInventory {
    private final DefaultedList<ItemStack> items = DefaultedList.ofSize(3, ItemStack.EMPTY);

    public MyBlockEntity(BlockPos pos, BlockState state) {
        super(MyMod.MY_BLOCK_ENTITY_TYPE, pos, state);
    }

    @Override
    public int[] getAvailableSlots(Direction side) {
        return new int[]{0, 1, 2};
    }

    @Override
    public boolean canInsert(int slot, ItemStack stack, @Nullable Direction dir) {
        // Only allow certain items in each slot
        switch (slot) {
            case 0:
                return stack.getItem() == Items.DIAMOND;
            case 1:
                return stack.getItem() == Items.GOLD_INGOT;
            case 2:
                return stack.getItem() == Items.IRON_INGOT;
            default:
                return false;
        }
    }

    @Override
    public boolean canExtract(int slot, ItemStack stack, Direction dir) {
        return true;
    }

    @Override
    public int size() {
        return items.size();
    }

    @Override
    public boolean isEmpty() {
        for (ItemStack itemStack : items) {
            if (!itemStack.isEmpty()) {
                return false;
            }
        }
        return true;
    }

    @Override
    public ItemStack getStack(int slot) {
        return items.get(slot);
    }

    @Override
    public ItemStack removeStack(int slot, int count) {
        return Inventories.splitStack(items, slot, count);
    }

    @Override
    public ItemStack removeStack(int slot) {
        return Inventories.removeStack(items, slot);
    }

    @Override
    public void setStack(int slot, ItemStack stack) {
        items.set(slot, stack);
        if (stack.getCount() > getMaxCountPerStack()) {
            stack.setCount(getMaxCountPerStack());
        }
    }

    @Override
    public void clear() {
        items.clear();
    }
}
---------------------
@Mixin(SandBlock.class)
public class SandBlockMixin {
    @Inject(method = "onLandedUpon", at = @At("HEAD"))
    private void onLandedUpon(World world, BlockPos pos, Entity entity, float distance, CallbackInfo ci) {
        // Custom behavior when an entity lands on this block
    }
}

ServerTickCallback.EVENT.register(server -> {
    // Custom behavior that happens once per tick on the server side
});